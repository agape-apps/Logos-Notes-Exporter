import * as path from 'path';
import { app, BrowserWindow } from 'electron';
import electronSquirrelStartup from 'electron-squirrel-startup';
import { Logger } from '@logos-notes-exporter/core';
import { loadSettings, saveSettings } from './settings';
import { setupIpcHandlers } from './ipc-handlers';
import { getDefaultDatabasePath } from './export-handler';

// Create logger for main process
const logger = new Logger({ enableConsole: true, enableFile: false });

logger.logInfo('Main process starting', { 
  timestamp: new Date().toISOString(),
  nodeVersion: process.version,
  electronVersion: process.versions.electron
}, 'MainProcess');

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (electronSquirrelStartup) {
  logger.logInfo('Squirrel startup detected, quitting app', {}, 'MainProcess');
  app.quit();
}

let mainWindow: BrowserWindow | null = null;

const createWindow = (): void => {
  logger.logInfo('Creating main window', {}, 'createWindow');
  
  try {
    // Load saved settings to get window size
    const { settings, windowSize } = loadSettings();
    logger.logDebug('Settings loaded for window creation', { 
      hasSettings: !!settings,
      windowSize 
    }, 'createWindow');
  
    // Create the browser window with PRD specifications
    mainWindow = new BrowserWindow({
      width: windowSize.width,
      height: windowSize.height,
      minWidth: 1024,
      minHeight: 700,
      // TODO: Icon for development mode (not working)
      icon: path.join(__dirname, '../../images/icon.icns'), 
      webPreferences: {
        preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
        nodeIntegration: false,
        contextIsolation: true,
      },
      title: 'Logos Notes Exporter',
      show: false, // Don't show until ready
    });

    logger.logInfo('Browser window created successfully', { 
      width: windowSize.width,
      height: windowSize.height 
    }, 'createWindow');

    // Load the index.html of the app
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    // Show window when ready to prevent visual flash
    mainWindow.once('ready-to-show', () => {
      logger.logInfo('Renderer ready, showing window', {}, 'ready-to-show');
      
      if (mainWindow) {
        mainWindow.show();
        
        // Send initial settings to renderer
        logger.logInfo('Sending initial settings to renderer', { 
          outputDirectory: settings.outputDirectory 
        }, 'ready-to-show');
        mainWindow.webContents.send('settings-loaded', settings);
        mainWindow.webContents.send('output-log', '🚀 Logos Notes Exporter ready!');
        
        // Auto-detect database on startup
        mainWindow.webContents.send('output-log', '🔍 Auto-detecting Logos database...');
        
        // Run database detection in background
        setTimeout(async () => {
          try {
            logger.logInfo('Starting background database detection', {}, 'database-detection');
            const detectedPath = getDefaultDatabasePath();
            logger.logInfo('Database detection completed', { 
              found: !!detectedPath,
              path: detectedPath 
            }, 'database-detection');
            
            if (detectedPath && mainWindow) {
              mainWindow.webContents.send('database-detected', detectedPath);
              mainWindow.webContents.send('output-log', `✅ Database detected: ${path.basename(detectedPath)}`);
            } else if (mainWindow) {
              mainWindow.webContents.send('output-log', '⚠️ No database auto-detected. Use "Select Database" to choose manually.');
            }
          } catch (error) {
            logger.logError('Database detection failed', { 
              error: error instanceof Error ? error.message : String(error)
            }, 'database-detection');
            if (mainWindow) {
              mainWindow.webContents.send('output-log', '⚠️ Database detection failed. Use "Select Database" to choose manually.');
            }
          }
        }, 1000);
      }
    });

    // Save window size when resized
    mainWindow.on('resize', () => {
      if (mainWindow) {
        const [width, height] = mainWindow.getSize();
        try {
          const currentSettings = loadSettings();
          saveSettings(currentSettings.settings, currentSettings.mode, { width, height });
          logger.logDebug('Window size saved', { width, height }, 'window-resize');
        } catch (error) {
          logger.logError('Error saving window size', { 
            error: error instanceof Error ? error.message : String(error)
          }, 'window-resize');
        }
      }
    });

    // Open the DevTools in development
    if (process.env.NODE_ENV === 'development') {
      logger.logInfo('Development mode detected, opening DevTools', {}, 'createWindow');
      mainWindow.webContents.openDevTools();
    }

    // Save settings before closing
    mainWindow.on('close', () => {
      try {
        // Get current window size and save all settings
        if (mainWindow) {
          const [width, height] = mainWindow.getSize();
          const currentSettings = loadSettings();
          saveSettings(currentSettings.settings, currentSettings.mode, { width, height });
          logger.logInfo('Settings saved on window close', { width, height }, 'window-close');
        }
      } catch (error) {
        logger.logError('Error saving settings on close', { 
          error: error instanceof Error ? error.message : String(error)
        }, 'window-close');
      }
    });

    mainWindow.on('closed', () => {
      logger.logInfo('Main window closed, clearing reference', {}, 'window-closed');
      mainWindow = null;
    });
    
  } catch (error) {
    logger.logError('Failed to create main window', { 
      error: error instanceof Error ? error.message : String(error)
    }, 'createWindow');
    throw error;
  }
};

// Save settings before quitting the app
app.on('before-quit', () => {
  try {
    if (mainWindow) {
      const [width, height] = mainWindow.getSize();
      const currentSettings = loadSettings();
      saveSettings(currentSettings.settings, currentSettings.mode, { width, height });
      logger.logInfo('Settings saved on app quit', { width, height }, 'app-quit');
    }
  } catch (error) {
    logger.logError('Error saving settings on quit', { 
      error: error instanceof Error ? error.message : String(error)
    }, 'app-quit');
  }
});

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  try {
    logger.logInfo('Electron app ready, setting up IPC handlers', {}, 'app-ready');
    setupIpcHandlers();
    createWindow();
    logger.logInfo('Application initialization completed successfully', {}, 'app-ready');
  } catch (error) {
    logger.logError('Failed to initialize application', { 
      error: error instanceof Error ? error.message : String(error)
    }, 'app-ready');
  }
});

// Quit when all windows are closed on all platforms
// This app should quit when the main window is closed
app.on('window-all-closed', () => {
  logger.logInfo('All windows closed, quitting application', {}, 'window-all-closed');
  app.quit();
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    logger.logInfo('App activated with no windows, creating new window', {}, 'app-activate');
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
