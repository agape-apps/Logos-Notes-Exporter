name: Build and Release Binaries

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.1, v2.1.0, etc.

permissions:
  contents: write  # Required for creating releases and uploading assets

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: bun-macos-x64
            script: binary:macx64
            artifact: bin/macos-x64/Logos-Notes-Exporter
            name: Logos-Notes-Exporter-macos-x64
          - os: macos-latest
            target: bun-macos-arm64
            script: binary:macarm
            artifact: bin/macos-arm64/Logos-Notes-Exporter
            name: Logos-Notes-Exporter-macos-arm64
          - os: windows-latest
            target: bun-windows-x64
            script: binary:windows
            artifact: bin/windows-x64/Logos-Notes-Exporter.exe
            name: Logos-Notes-Exporter-windows-x64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PNPM
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: pnpm install

      - name: Build core package
        run: pnpm run build:core

      - name: Build CLI package
        run: pnpm --filter @logos-notes-exporter/cli run build

      - name: Create bin directories
        run: |
          mkdir -p bin/macos-x64 bin/macos-arm64 bin/windows-x64
        shell: bash

      - name: Build binary
        run: pnpm --filter @logos-notes-exporter/cli run ${{ matrix.script }}
        shell: bash

      - name: Verify built binary exists
        run: |
          echo "Checking for binary at: ${{ matrix.artifact }}"
          ls -la ${{ matrix.artifact }}
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.artifact }}

  build-electron-apps:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-13
            target: darwin-x64
            arch: x64
            artifact_name: Logos-Notes-Exporter-electron-macos-x64
          - os: macos-14
            target: darwin-arm64
            arch: arm64
            artifact_name: Logos-Notes-Exporter-electron-macos-arm64
          - os: windows-latest
            target: win32-x64
            arch: x64
            artifact_name: Logos-Notes-Exporter-electron-windows-x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PNPM
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build config package
        run: pnpm run build:config

      - name: Build core package
        run: pnpm run build:core

      - name: Build Electron package
        run: pnpm --filter @logos-notes-exporter/electron run build

      - name: Create Electron distributables
        run: pnpm --filter @logos-notes-exporter/electron run make -- --arch=${{ matrix.arch }} --platform=darwin
        if: matrix.os != 'windows-latest'
        env:
          npm_config_target_arch: ${{ matrix.arch }}
          npm_config_target_platform: darwin

      - name: Create Electron distributables (Windows)
        run: pnpm --filter @logos-notes-exporter/electron run make -- --arch=${{ matrix.arch }} --platform=win32
        if: matrix.os == 'windows-latest'
        env:
          npm_config_target_arch: ${{ matrix.arch }}
          npm_config_target_platform: win32

      - name: Find and prepare artifacts
        id: find-artifacts
        run: |
          cd packages/electron
          
          echo "=== Debugging info ==="
          echo "Matrix OS: ${{ matrix.os }}"
          echo "Artifact name: ${{ matrix.artifact_name }}"
          echo "Available files in out/:"
          find out -type f | head -10
          
          if [[ "${{ matrix.os }}" == macos-* ]]; then
            # Find the ZIP file created by Electron Forge
            ZIP_FILE=$(find out -name "*.zip" -type f | head -1)
            if [ -n "$ZIP_FILE" ]; then
              echo "Found macOS artifact: $ZIP_FILE"
              mkdir -p ../../artifacts
              cp "$ZIP_FILE" "../../artifacts/${{ matrix.artifact_name }}.zip"
              echo "artifact_path=artifacts/${{ matrix.artifact_name }}.zip" >> $GITHUB_OUTPUT
              echo "artifact_exists=true" >> $GITHUB_OUTPUT
            else
              echo "No ZIP file found for macOS"
              echo "artifact_exists=false" >> $GITHUB_OUTPUT
            fi
          else
            # Find the Windows installer created by Electron Forge
            EXE_FILE=$(find out -name "*.exe" -type f | head -1)
            if [ -n "$EXE_FILE" ]; then
              echo "Found Windows artifact: $EXE_FILE"
              mkdir -p ../../artifacts
              cp "$EXE_FILE" "../../artifacts/${{ matrix.artifact_name }}-setup.exe"
              echo "artifact_path=artifacts/${{ matrix.artifact_name }}-setup.exe" >> $GITHUB_OUTPUT
              echo "artifact_exists=true" >> $GITHUB_OUTPUT
            else
              echo "No EXE file found for Windows"
              echo "artifact_exists=false" >> $GITHUB_OUTPUT
            fi
          fi
        shell: bash

      - name: Upload Electron artifact
        if: steps.find-artifacts.outputs.artifact_exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ steps.find-artifacts.outputs.artifact_path }}

  create-release:
    needs: [build-and-release, build-electron-apps]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display structure of downloaded files
        run: |
          echo "=== Artifacts directory structure ==="
          find ./artifacts -type f -ls
          echo "=== Preparing files for release ==="

      - name: Prepare release files
        run: |
          mkdir -p ./release-files
          
          # Copy and rename CLI binary files
          cp ./artifacts/Logos-Notes-Exporter-macos-x64/Logos-Notes-Exporter ./release-files/Logos-Notes-Exporter-macos-x64
          cp ./artifacts/Logos-Notes-Exporter-macos-arm64/Logos-Notes-Exporter ./release-files/Logos-Notes-Exporter-macos-arm64
          cp ./artifacts/Logos-Notes-Exporter-windows-x64.exe/Logos-Notes-Exporter.exe ./release-files/Logos-Notes-Exporter-windows-x64.exe
          
          # Copy Electron app files (if they exist)
          if [ -f "./artifacts/Logos-Notes-Exporter-electron-macos-x64/Logos-Notes-Exporter-electron-macos-x64.zip" ]; then
            cp "./artifacts/Logos-Notes-Exporter-electron-macos-x64/Logos-Notes-Exporter-electron-macos-x64.zip" "./release-files/Logos-Notes-Exporter-electron-macos-x64.zip"
          fi
          if [ -f "./artifacts/Logos-Notes-Exporter-electron-macos-arm64/Logos-Notes-Exporter-electron-macos-arm64.zip" ]; then
            cp "./artifacts/Logos-Notes-Exporter-electron-macos-arm64/Logos-Notes-Exporter-electron-macos-arm64.zip" "./release-files/Logos-Notes-Exporter-electron-macos-arm64.zip"
          fi
          if [ -f "./artifacts/Logos-Notes-Exporter-electron-windows-x64/Logos-Notes-Exporter-electron-windows-x64-setup.exe" ]; then
            cp "./artifacts/Logos-Notes-Exporter-electron-windows-x64/Logos-Notes-Exporter-electron-windows-x64-setup.exe" "./release-files/Logos-Notes-Exporter-electron-windows-x64-setup.exe"
          fi
          
          # Make macOS binaries executable
          chmod +x ./release-files/Logos-Notes-Exporter-macos-*
          
          # Generate SHA256 checksums for all files
          cd ./release-files
          sha256sum Logos-Notes-Exporter-macos-x64 > Logos-Notes-Exporter-macos-x64.sha256
          sha256sum Logos-Notes-Exporter-macos-arm64 > Logos-Notes-Exporter-macos-arm64.sha256
          sha256sum Logos-Notes-Exporter-windows-x64.exe > Logos-Notes-Exporter-windows-x64.exe.sha256
          
          # Generate checksums for Electron apps if they exist
          if [ -f "Logos-Notes-Exporter-electron-macos-x64.zip" ]; then
            sha256sum Logos-Notes-Exporter-electron-macos-x64.zip > Logos-Notes-Exporter-electron-macos-x64.zip.sha256
          fi
          if [ -f "Logos-Notes-Exporter-electron-macos-arm64.zip" ]; then
            sha256sum Logos-Notes-Exporter-electron-macos-arm64.zip > Logos-Notes-Exporter-electron-macos-arm64.zip.sha256
          fi
          if [ -f "Logos-Notes-Exporter-electron-windows-x64-setup.exe" ]; then
            sha256sum Logos-Notes-Exporter-electron-windows-x64-setup.exe > Logos-Notes-Exporter-electron-windows-x64-setup.exe.sha256
          fi
          
          cd ..
          echo "=== Final release files ==="
          ls -la ./release-files/

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## 🎉 Logos Notes Exporter ${{ github.ref_name }}
            
            ### 📦 Download

            **CLI Binaries** (Command-line interface):
            - **🍎 macOS (Intel)**: `Logos-Notes-Exporter-macos-x64`
            - **🍎 macOS (Apple Silicon)**: `Logos-Notes-Exporter-macos-arm64`  
            - **🪟 Windows**: `Logos-Notes-Exporter-windows-x64.exe`

            **Desktop Apps** (Graphical interface):
            - **🍎 macOS (Intel)**: `Logos-Notes-Exporter-electron-macos-x64.zip`
            - **🍎 macOS (Apple Silicon)**: `Logos-Notes-Exporter-electron-macos-arm64.zip`  
            - **🪟 Windows**: `Logos-Notes-Exporter-electron-windows-x64-setup.exe`
          
            ### 🚀 Quick Start

            **CLI (Terminal):**

            **macOS:**
            1. **Install**: `chmod +x Logos-Notes-Exporter-* && mv -v Logos-Notes-Exporter-* /usr/local/bin/Logos-Notes-Exporter`
            2. **Run**: `Logos-Notes-Exporter --help`
            3. **Export your notes**: `Logos-Notes-Exporter`

            **Windows:**
            1. **Run**: `Logos-Notes-Exporter-windows-x64.exe --help`
            2. **Export your notes**: `Logos-Notes-Exporter-windows-x64.exe`

            **Desktop App:**

            **macOS:**
            1. **Extract**: Unzip the downloaded file
            2. **Install**: Drag the app to your Applications folder
            3. **Run**: Launch from Applications or Launchpad

            **Windows:**
            1. **Install**: Run the setup.exe file
            2. **Run**: Launch from Start Menu or Desktop shortcut
            
            ### 📖 Full Documentation
            See [README.md](https://github.com/agape-apps/LogosNotesExport/blob/main/README.md) for complete usage instructions and examples.
            
            ### 🔧 What's New
            See [CHANGES.md](https://github.com/agape-apps/LogosNotesExport/blob/main/CHANGES.md) for details.

            ### 🔐 Verify Integrity (Recommended)

            **Verify your download using SHA256 checksums:**

            **macOS/Linux**
            ```bash
            sha256sum -c Logos-Notes-Exporter-*.sha256
            ```
            
            **Windows (PowerShell)**
            ```powershell
            Get-FileHash Logos-Notes-Exporter-windows-x64.exe -Algorithm SHA256
            ```
            - Compare with content of Logos-Notes-Exporter-windows-x64.exe.sha256
            ```
          files: |
            ./release-files/Logos-Notes-Exporter-macos-x64
            ./release-files/Logos-Notes-Exporter-macos-x64.sha256
            ./release-files/Logos-Notes-Exporter-macos-arm64
            ./release-files/Logos-Notes-Exporter-macos-arm64.sha256
            ./release-files/Logos-Notes-Exporter-windows-x64.exe
            ./release-files/Logos-Notes-Exporter-windows-x64.exe.sha256
            ./release-files/Logos-Notes-Exporter-electron-macos-x64.zip
            ./release-files/Logos-Notes-Exporter-electron-macos-x64.zip.sha256
            ./release-files/Logos-Notes-Exporter-electron-macos-arm64.zip
            ./release-files/Logos-Notes-Exporter-electron-macos-arm64.zip.sha256
            ./release-files/Logos-Notes-Exporter-electron-windows-x64-setup.exe
            ./release-files/Logos-Notes-Exporter-electron-windows-x64-setup.exe.sha256
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 